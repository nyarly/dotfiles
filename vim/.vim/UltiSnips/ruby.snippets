snippet req "require" !b
require '${1}'
endsnippet
snippet collect "collect"
collect do |${1:item}|
	${2}
end
endsnippet

snippet memo "Memoized function" !b
def ${1}
  @$1 ||= ${0:`!v substitute(substitute(@", '^\s\+','', ""), '\s\+$', '', "")`}
end
endsnippet

snippet strong_params "Rails strong params" !b
def ${1}_params
	params.require(:$1)
end

def $1_attrs
	$1_params.permit ${0:`!v substitute(substitute(@", '^\s\+\(attr_\(accessible\|protected\)\s*\)\?','', ""), '\s\+$', '', "")`}
end
endsnippet

snippet detect "detect"
detect do |${1:item}|
	${2}
end
endsnippet

snippet vcr "vcr metadata"
:vcr => {${1}}
endsnippet

snippet Rld "Rails.logger.debug" b
Rails.logger.debug{ ${0}.inspect }
endsnippet

snippet .Rld "tapped Rails logger.debub" i
.tap{|value| Rails.logger.debug{ "#{__FILE__}:#{__LINE__} => #{${1:value}.inspect}" } }
endsnippet

snippet pfl "p file,line"
puts "\n#{__FILE__}:#{__LINE__} => #{${0:${VISUAL:nil}}.inspect}"
endsnippet

snippet pdg "p graph dump"
puts "\n#{__FILE__}:#{__LINE__} => \n#{${1:${VISUAL:nil}}.dump(${2::ntriples})}"
endsnippet

snippet .pfl "tapped puts with file,line" i
.tap{|value| puts "#{__FILE__}:#{__LINE__} => #{${1:${VISUAL:value}}.inspect}"}
endsnippet

snippet map "map"
map do |${1:item}|
	${2}
end
endsnippet

snippet m "m"
map {|${1:item}| ${2}}
endsnippet

snippet find "find"
find do |${1:item}|
	${2}
end
endsnippet

snippet find_all "find_all"
find_all do |${1:item}|
	${2}
end
endsnippet

snippet each "each"
each do |${1:item}|
	${2}
end
endsnippet

snippet each_slice "each_slice"
each_slice(${1:2}) do |${1:array}|
	${2}
end
endsnippet

snippet each_cons "each_cons"
each_cons(${1:2}) do |${1:array}|
	${2}
end
endsnippet

snippet each_with_index "each_with_index"
each_with_index do |${1:item}, ${2:index}|
	${3}
end
endsnippet

snippet inject "inject"
inject${1} do |${2:memo}, ${3:item}|
	${4}
end
endsnippet

snippet dbg "dbg"
require 'ruby-debug'; debugger
endsnippet

snippet desc "describe Classname"
describe ${1:`!v substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`} do
	${2}
end
endsnippet

snippet desc "describe 'some other thing'"
describe "${1}" do
	${2}
end
endsnippet

snippet desc "describe Classname, 'special case'"
describe ${1:`!v substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`}, "${2}" do
	${3}
end
endsnippet

snippet cont "context block" !b
context "${1}" do
	${0}
end

endsnippet

snippet !desc"! "describe 'special case'"
describe "${1}" do
	${2}
end
endsnippet

snippet descc "descc"
describe ${1:`!v substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`} do
	${2}
end
endsnippet

snippet !descc"!
describe ${1:`!v substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`}, "${2}" do
	${3}
end
endsnippet

snippet bef "before :each"
before :each do
	${1}
end
endsnippet

snippet FG "FactoryGirl setup" !b
FactoryGirl.${1:create}($0)
endsnippet

snippet befa "befa"
before :all do
	${1}
end
endsnippet

snippet af "af"
after :each do
	${1}
end
endsnippet

snippet afa "afa"
after :all do
	${1}
end
endsnippet

snippet let "let block" !b
let :${1} do
	${0}
end
endsnippet

snippet ex "RSpec 3 expect" !b
expect(${1:${VISUAL}}).to ${0}
endsnippet

snippet it "it"
it "should ${1}" do
	${2}
end
endsnippet

snippet isbl "isbl"
it_should_behave_like "${1}"
endsnippet

snippet sh "sh"
should
endsnippet

snippet sn "sn"
should_not
endsnippet

snippet bn "bn"
be_nil
endsnippet

snippet beg "beg"
begin
	${2}
rescue ${1:Exception} => ex
	${3}
end
endsnippet
