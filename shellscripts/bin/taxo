#!/usr/bin/env ruby20

class Taxo
  class << self
    def run(rulepath, filename)
      taxo = self.new
      taxo.rulepath = rulepath
      taxo.filename = filename
      taxo.run
    end
  end

  def initialize
  end
  attr_accessor :rulepath, :filename

  def parse(rule_string)
    sep_char = rule_string[1]
    rule_parts = rule_string.split(sep_char)

    kind = options = rule = value = nil
    case rule_parts.length
    when 3
      kind, rule, value = *rule_parts
      options = ""
    when 4
      kind, options, rule, value = *rule_parts
    else
      raise "Extra separator character #{sep_char.inspect} in #{rule_string.inspect}"
    end

    case kind
    when "r", "R"
      return RegexRule.new(kind, options, rule, value).check
    when "g", "G", "f", "F"
      return GlobRule.new(kind, options, rule, value).check
    else
      raise "Unknown rule kind #{kind} in #{rule_parts.map{|prt| prt.inspect}.join(",")}"
    end
  end

  def parse_rules(string)
    string.each_line.find_all do |line|
      line !~ /^#/ and line !~ /^\s*$/
    end.map do |rulestring|
      parse(rulestring)
    end
  end

  def load_rules
    parse_rules(File.read(@rulepath))
  end

  def run
    rules = load_rules
    matched_rule = rules.find do |rule|
      rule.match?(filename).tap do |result|
        p([filename,rule.rule,result]) if ENV["TAXO_DEBUG"]
      end
    end

    if matched_rule.nil?
      exit 1
    else
      puts matched_rule.value
      exit 0
    end
  end

  class Rule
    def initialize(kind, options, rule, value)
      @kind, @options, @rule, @value = kind,options,rule,value
    end
    attr_reader :rule, :options, :value

    def match?(filename)
      return false
    end

    def check
      rule; options; value
      self
    end
  end

  class RegexRule < Rule
    def match?(filename)
      rule =~ filename
    end

    def rule
      @regex ||= Regexp.new(@rule, options)
    end

    def options
      @flags ||= @options.each_char.inject(0) do |flags, letter|
        case letter
        when "i"
          flags | Regexp::IGNORECASE
        when "m"
          flags | Regexp::MULTILINE
        when "x"
          flags | Regexp::EXTENDED
        else
          raise "Unrecognized flag #{letter} in #@options for a regexp rule"
        end
      end
    end
  end

  class GlobRule < Rule
    def match?(filename)
      File::fnmatch?(@rule, filename, options)
    end

    def options
      @flags ||= @options.each_char.inject(File::FNM_EXTGLOB) do |flags, letter|
        case letter
        when "h", "d"
          flags | File::FNM_DOTMATCH
        when "X"
          flags & (~File::FNM_EXTGLOB)
        else
          raise "Unrecognized flag #{letter} in #@options for a glob rule"
        end
      end
    end
  end
end

if __FILE__ == $0
  if ARGV.length == 2
    Taxo.run(*ARGV)
  else
    puts "Usage: #$0 <rulefile> <filename>"
  end
end
