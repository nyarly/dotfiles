#!/usr/bin/env bash

remote=${1:-origin}

declare -a branches
declare -a local_branches
for branch in $(git branch --merged | egrep -v '(^[*])|(master)|(staging)|(production)|(^\s*$)'); do
  branch_remote=$(git config --get branch.$branch.remote)

  if [ "$branch_remote" == "$remote" ]; then
    branches+=($branch)
  fi

  if [ -z $branch_remote ]; then
    local_branches+=($branch)
  fi
done

if [ ${#branches[*]} -ne 0 ]; then
  echo Cleaning:
  echo ${branches[*]}

  logfile=/tmp/$(basename ${0}).log
  echo -n > $logfile
  for branch in ${branches[*]}; do
    #If we can delete the branch remotely, delete it locally
    git push $remote :$branch 2>> $logfile
    git branch -d $branch 2>> $logfile
  done

  cat $logfile
fi

if [ ${#arr[*]} -gt 0 ]; then
  echo "These branches were merged, but don't have a corresponding upstream branch."
  echo ${local_branches[*]}
fi

remotes=$(git remote)
for remote in $remotes; do
  git remote prune $remote
done

echo "Running garbage collection"
git gc 2>/dev/null
